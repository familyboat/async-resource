{"version":3,"sources":["Tbody.js","Theader.js","Table.js","util.js","App.js","reportWebVitals.js","index.js"],"names":["Tbody","props","columns","dataSource","dataRender","data","map","column","index","dataIndex","Theader","title","Table","waitTime","time","Promise","resolve","setTimeout","httpGet","url","a","Math","random","fetch","method","mode","response","persons","json","Error","App","fn","length","ceil","setDataSource","slice","React","useState","useEffect","Object","keys","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQA+BeA,MA/Bf,SAAeC,GAAQ,IACdC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,WAEVC,EAAa,SAACC,GAClB,OAAOH,EAAQI,KAAI,SAACC,EAAQC,GAC1B,IAAMC,EAAYF,EAAOE,UACzB,OACE,6BACGJ,EAAKI,IADCD,OAiBf,OACE,gCAVOL,EAAWG,KAAI,SAACD,EAAMG,GAC3B,OACE,6BACGJ,EAAWC,IADLG,SCIFE,MArBf,SAAiBT,GAAQ,IAChBC,EAAWD,EAAXC,QAWP,OACE,gCACE,6BAXKA,EAAQI,KAAI,SAACC,EAAQC,GAC1B,OACE,6BACGD,EAAOI,OADDH,WCcFI,MAhBf,SAAeX,GAAQ,IACdC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,WAEhB,OACE,kCACE,cAAC,EAAD,CACED,QAASA,IAEX,cAAC,EAAD,CACEA,QAASA,EACTC,WAAYA,QCbPU,EAAW,SAACC,GACvB,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,GAAQ,KACPF,OAIMI,EAAO,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACfP,EAAyB,IAAhBQ,KAAKC,UADC,uBAEEC,MAAMJ,EAAK,CAChCK,OAAQ,MACRC,KAAM,gBAJa,cAEfC,EAFe,gBAObC,EAAUD,EAASE,OAPN,kBAQZD,GARY,wCAUb,IAAIE,MAAJ,MAVa,0DAAH,sDCoELC,MAvEf,WACE,IAAM5B,EAAU,CACd,CACES,MAAO,OACPF,UAAW,QAEb,CACEE,MAAO,MACPF,UAAW,QAITsB,EAAE,uCAAG,gCAAAX,EAAA,4DACG,wCADH,kBAGeF,EAFZ,yCADH,OAGDS,EAHC,OAMDK,EAASL,EAAQK,OACjBxB,EAAQa,KAAKY,KAAKZ,KAAKC,SAAWU,GACxCE,EAAcP,EAAQQ,MAAM,EAAG3B,IARxB,kDAUP0B,EAAc,IAVP,0DAAH,qDAZK,EAoCuBE,IAAMC,SAAS,MApCtC,mBAoCNlC,EApCM,KAoCM+B,EApCN,KAgEb,OA1BAE,IAAME,WAAU,WACdP,MACC,IAyBD,mCAtBmB,OAAf5B,EACK,cAESoC,OAAOC,KAAKrC,GAAY6B,OAGtC,cAAC,EAAD,CACE9B,QAASA,EACTC,WAAYA,IAKd,wBACCsC,QAAS,WAAOV,KADjB,2CCjDOW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4d44da5c.chunk.js","sourcesContent":["function Tbody(props) {\r\n  const {columns, dataSource} = props;\r\n\r\n  const dataRender = (data) => {\r\n    return columns.map((column, index) => {\r\n      const dataIndex = column.dataIndex;\r\n      return (\r\n        <td key={index}>\r\n          {data[dataIndex]}\r\n        </td>\r\n      )\r\n    })\r\n  }\r\n\r\n  const tbodyRender = () => {\r\n    return dataSource.map((data, index) => {\r\n      return (\r\n        <tr key={index}>\r\n          {dataRender(data)}\r\n        </tr>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {tbodyRender()}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nexport default Tbody;","function Theader(props) {\r\n  const {columns} = props;\r\n  const theadRender = () => {\r\n    return columns.map((column, index) => {\r\n      return (\r\n        <td key={index}>\r\n          {column.title}\r\n        </td>\r\n      )\r\n    })\r\n  };\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {theadRender()}\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nexport default Theader;","import Tbody from \"./Tbody\";\r\nimport Theader from \"./Theader\";\r\n\r\nfunction Table(props) {\r\n  const {columns, dataSource} = props;\r\n\r\n  return (\r\n    <table>\r\n      <Theader\r\n        columns={columns}\r\n      />\r\n      <Tbody\r\n        columns={columns}\r\n        dataSource={dataSource}\r\n      />\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default Table;","export const waitTime = (time) => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(true);\r\n    }, time);\r\n  });\r\n}\r\n\r\nexport const httpGet = async (url) => {\r\n  await waitTime(Math.random() * 2000);\r\n  const response = await fetch(url, {\r\n    method: 'GET',\r\n    mode: 'same-origin',\r\n  });\r\n  try {\r\n    const persons = response.json();\r\n    return persons;\r\n  } catch (e) {\r\n    throw new Error(e);\r\n  }\r\n}","import './App.css';\nimport Table from './Table';\nimport React from 'react';\nimport { httpGet} from './util';\n\nfunction App() {\n  const columns = [\n    {\n      title: 'name',\n      dataIndex: 'name',\n    },\n    {\n      title: 'age',\n      dataIndex: 'age',\n    },\n  ];\n\n  const fn = async () => {\n    const url = '/async-resource/services/persons.json';\n    try {\n      const persons = await httpGet(url);\n\n      /* 对请求回的数据做一些截断处理 */\n      const length = persons.length;\n      const index = Math.ceil(Math.random() * length);\n      setDataSource(persons.slice(0, index));\n    } catch (e) {\n      setDataSource([])\n    }\n  };\n\n  /**  \n    *后端资源应该在放在state中维护\n    *\n    *根据state的值，推断出该资源的当前所处的状态：\n    *未请求态--null\n    *请求成功态--[{}, {}]\n    *请求失败态--[]\n    *\n    *对不同的state设置不同的ui，让交互更细化，更人性化\n  */\n  const [dataSource, setDataSource] = React.useState(null);\n\n  React.useEffect(() => {\n    fn();\n  }, []);\n\n  const tableRender = () => {\n    if (dataSource === null) {\n      return 'loading >>>';\n    }\n    const hasData = !!Object.keys(dataSource).length;\n    if (hasData) {\n      return (\n        <Table\n          columns={columns}\n          dataSource={dataSource}\n        />\n      )\n    } else {\n      return (\n        <button\n         onClick={() => {fn()}}\n        >\n          loading error, load again.\n        </button>\n      )\n    }\n  }\n  return (\n    <>\n      {tableRender()}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}