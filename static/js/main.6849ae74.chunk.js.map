{"version":3,"sources":["Tbody.js","Theader.js","Table.js","util.js","App.js","reportWebVitals.js","index.js"],"names":["Tbody","props","columns","dataSource","dataRender","data","map","column","index","dataIndex","Theader","title","Table","waitTime","time","Promise","resolve","setTimeout","App","React","useState","setDataSource","useEffect","a","name","age","fn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQA+BeA,MA/Bf,SAAeC,GAAQ,IACdC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,WAEVC,EAAa,SAACC,GAClB,OAAOH,EAAQI,KAAI,SAACC,EAAQC,GAC1B,IAAMC,EAAYF,EAAOE,UACzB,OACE,6BACGJ,EAAKI,IADCD,OAiBf,OACE,gCAVOL,EAAWG,KAAI,SAACD,EAAMG,GAC3B,OACE,6BACGJ,EAAWC,IADLG,SCIFE,MArBf,SAAiBT,GAAQ,IAChBC,EAAWD,EAAXC,QAWP,OACE,gCACE,6BAXKA,EAAQI,KAAI,SAACC,EAAQC,GAC1B,OACE,6BACGD,EAAOI,OADDH,WCcFI,MAhBf,SAAeX,GAAQ,IACdC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,WAEhB,OACE,kCACE,cAAC,EAAD,CACED,QAASA,IAEX,cAAC,EAAD,CACEA,QAASA,EACTC,WAAYA,QCbPU,EAAW,SAACC,GACvB,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,GAAQ,KACPF,OC6CQI,MA5Cf,WACE,IAAMhB,EAAU,CACd,CACES,MAAO,OACPF,UAAW,QAEb,CACEE,MAAO,MACPF,UAAW,QARF,EAYuBU,IAAMC,WAZ7B,mBAYNjB,EAZM,KAYMkB,EAZN,KAqCb,OAvBAF,IAAMG,WAAU,YACN,uCAAG,sBAAAC,EAAA,sEACHV,EAAS,KADN,OAETQ,EAAc,CACZ,CAACG,KAAM,QAASC,IAAK,IACrB,CAACD,KAAM,OAAQC,IAAK,MAJb,2CAAH,qDAORC,KACC,IAeD,mCAZIvB,EAEA,cAAC,EAAD,CACED,QAASA,EACTC,WAAYA,IAIT,gBC3BEwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6849ae74.chunk.js","sourcesContent":["function Tbody(props) {\r\n  const {columns, dataSource} = props;\r\n\r\n  const dataRender = (data) => {\r\n    return columns.map((column, index) => {\r\n      const dataIndex = column.dataIndex;\r\n      return (\r\n        <td key={index}>\r\n          {data[dataIndex]}\r\n        </td>\r\n      )\r\n    })\r\n  }\r\n\r\n  const tbodyRender = () => {\r\n    return dataSource.map((data, index) => {\r\n      return (\r\n        <tr key={index}>\r\n          {dataRender(data)}\r\n        </tr>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {tbodyRender()}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nexport default Tbody;","function Theader(props) {\r\n  const {columns} = props;\r\n  const theadRender = () => {\r\n    return columns.map((column, index) => {\r\n      return (\r\n        <td key={index}>\r\n          {column.title}\r\n        </td>\r\n      )\r\n    })\r\n  };\r\n\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {theadRender()}\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nexport default Theader;","import Tbody from \"./Tbody\";\r\nimport Theader from \"./Theader\";\r\n\r\nfunction Table(props) {\r\n  const {columns, dataSource} = props;\r\n\r\n  return (\r\n    <table>\r\n      <Theader\r\n        columns={columns}\r\n      />\r\n      <Tbody\r\n        columns={columns}\r\n        dataSource={dataSource}\r\n      />\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default Table;","export const waitTime = (time) => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(true);\r\n    }, time);\r\n  });\r\n}","import './App.css';\nimport Table from './Table';\nimport React from 'react';\nimport { waitTime } from './util';\n\nfunction App() {\n  const columns = [\n    {\n      title: 'name',\n      dataIndex: 'name',\n    },\n    {\n      title: 'age',\n      dataIndex: 'age',\n    },\n  ];\n\n  const [dataSource, setDataSource] = React.useState();\n\n  React.useEffect(() => {\n    const fn = async () => {\n      await waitTime(2000);\n      setDataSource([\n        {name: 'jacky', age: 10},\n        {name: 'rose', age: 32},\n      ]);\n    };\n    fn();\n  }, []);\n\n  const tableRender = () => {\n    if (dataSource) {\n      return (\n        <Table\n          columns={columns}\n          dataSource={dataSource}\n        />\n      )\n    } else {\n      return 'loading...'\n    }\n  }\n  return (\n    <>\n      {tableRender()}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}